{
  "env": {
    "browser": true,
    "commonjs": true,
    "node": true,
    "jquery": true,
    "amd": true,
    "es6": true
  },
  "globals": {},
  "extends": ["eslint:recommended", "plugin:react/recommended"],
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true,
      "modules": true
    },
    "ecmaVersion": 2019,
    "sourceType": "module"
  },
  "plugins": ["react", "react-hooks"],
  "settings": {
    "react": {
      "createClass": "createReactClass",
      "pragma": "React",
      "version": "detect"
    }
  },
  "rules": {
    // Removed rule "disallow the use of console" from recommended eslint rules
    "no-console": "off",

    "no-cond-assign": "off",

    "no-constant-condition": "off",

    "no-empty": "off",

    // Removed rule "disallow multiple spaces in regular expressions" from recommended eslint rules
    "no-regex-spaces": "off",

    // Removed rule "disallow the use of debugger" from recommended eslint rules
    "no-debugger": "off",

    // Removed rule "disallow unused variables" from recommended eslint rules
    "no-unused-vars": "off",

    // Removed rule "disallow mixed spaces and tabs for indentation" from recommended eslint rules
    "no-mixed-spaces-and-tabs": "off",

    // Removed rule "disallow the use of undeclared variables unless mentioned in /*global */ comments" from recommended eslint rules
    "no-undef": "off",

    "no-unsafe-finally": "off",

    // Warn against template literal placeholder syntax in regular strings
    "no-template-curly-in-string": 1,

    // Warn if return statements do not either always or never specify values
    // "consistent-return": 1,

    // Warn if no return statements in callbacks of array methods
    "array-callback-return": "off",

    // Require the use of === and !==
    // "eqeqeq": 2,

    // Disallow the use of alert, confirm, and prompt
    // "no-alert": 2,

    // Disallow the use of arguments.caller or arguments.callee
    "no-caller": 2,

    "no-control-regex": "off",

    // Disallow null comparisons without type-checking operators
    // "no-eq-null": 2,

    // Disallow the use of eval()
    // "no-eval": 2,

    // Warn against extending native types
    "no-extend-native": 1,

    // Warn against unnecessary calls to .bind()
    "no-extra-bind": 1,

    "no-extra-boolean-cast": "off",

    "no-extra-semi": "off",

    // Warn against unnecessary labels    
    // "no-extra-label": 1,

    "no-fallthrough": "off",

    // Disallow leading or trailing decimal points in numeric literals
    "no-floating-decimal": "off",

    "no-func-assign": "off",

    // Warn against shorthand type conversions
    // "no-implicit-coercion": 1,

    // Warn against function declarations and expressions inside loop statements
    "no-loop-func": "off",

    // Disallow new operators with the Function object
    "no-new-func": "off",

    // Warn against new operators with the String, Number, and Boolean objects
    "no-new-wrappers": "off",

    "no-redeclare": "off",

    "no-sparse-arrays": "off",

    "no-self-assign": "off",

    // Disallow throwing literals as exceptions
    "no-throw-literal": 2,

    "no-unexpected-multiline": "off",

    "no-unreachable": "off",

    "no-unused-labels": "off",

    // Require using Error objects as Promise rejection reasons
    "prefer-promise-reject-errors": 2,

    // Enforce “for” loop update clause moving the counter in the right direction
    "for-direction": 2,

    // Enforce return statements in getters
    "getter-return": "off",

    // Disallow await inside of loops
    "no-await-in-loop": 2,

    // Disallow comparing against -0
    "no-compare-neg-zero": 2,

    // Warn against catch clause parameters from shadowing variables in the outer scope
    // "no-catch-shadow": 1,

    // Disallow identifiers from shadowing restricted names
    "no-shadow-restricted-names": 2,

    "no-useless-escape": "off",

    // Enforce return statements in callbacks of array methods
    "callback-return": "off",

    // Require error handling in callbacks
    "handle-callback-err": "off",

    // Warn against string concatenation with __dirname and __filename
    "no-path-concat": 1,

    // Prefer using arrow functions for callbacks
    // "prefer-arrow-callback": 1,

    // Return inside each then() to create readable and reusable Promise chains.
    // Forces developers to return console logs and http calls in promises. 
    "promise/always-return": "off",

    //Enforces the use of catch() on un-returned promises
    "promise/catch-or-return": "off",

    // Warn against nested then() or catch() statements
    "promise/no-nesting": "off",

    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "react/no-children-prop": "off",
    "react/prop-types": ["off"],
    "react-hooks/rules-of-hooks": "off",
    "react-hooks/exhaustive-deps": "warn",

    "valid-typeof": "off"
  }
}
